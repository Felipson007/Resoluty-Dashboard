/**
 * üìä Google Sheets Service - Resoluty
 *
 * Servi√ßo respons√°vel por toda integra√ß√£o com Google Sheets API.
 *
 * Funcionalidades:
 * - Autentica√ß√£o com Google Sheets API
 * - Opera√ß√µes CRUD (Create, Read, Update, Delete)
 * - Logging de eventos e a√ß√µes do usu√°rio
 * - Estat√≠sticas de uso
 * - Tratamento de erros e fallbacks
 *
 * @author Resoluty
 * @version 1.0.0
 */
/**
 * Servi√ßo principal do Google Sheets
 * Cont√©m todos os m√©todos para intera√ß√£o com planilhas
 */
export declare const googleSheetsService: {
    /**
     * Testa a conex√£o com Google Sheets
     *
     * @returns Promise<object> - Status da conex√£o
     */
    testConnection(): Promise<{
        status: string;
        message: string;
        sheetId: string;
    } | {
        status: string;
        message: any;
        sheetId?: undefined;
    }>;
    /**
     * Escreve dados em uma faixa espec√≠fica do Google Sheets
     *
     * @param range - Faixa da planilha (ex: 'A1:B2')
     * @param values - Array 2D com os valores
     * @returns Promise<object> - Resultado da opera√ß√£o
     */
    writeData(range: string, values: any[][]): Promise<any>;
    /**
     * Adiciona dados ao final de uma faixa no Google Sheets
     *
     * @param range - Faixa da planilha (ex: 'A:A')
     * @param values - Array 2D com os valores
     * @returns Promise<object> - Resultado da opera√ß√£o
     */
    appendData(range: string, values: any[][]): Promise<any>;
    /**
     * L√™ dados de uma faixa espec√≠fica do Google Sheets
     *
     * @param range - Faixa da planilha (ex: 'A1:D10')
     * @returns Promise<any[][]> - Array 2D com os dados
     */
    readData(range: string): Promise<any>;
    /**
     * Registra a√ß√µes do usu√°rio no Google Sheets
     *
     * @param action - Tipo da a√ß√£o (ex: 'login', 'click_button')
     * @param details - Detalhes da a√ß√£o (objeto ou string)
     * @param userId - ID do usu√°rio (opcional)
     */
    logUserAction(action: string, details: any, userId?: string): Promise<void>;
    /**
     * Registra eventos do frontend no Google Sheets
     *
     * @param event - Tipo do evento (ex: 'page_load', 'chart_interaction')
     * @param details - Detalhes do evento (objeto ou string)
     */
    logFrontendEvent(event: string, details: any): Promise<void>;
    /**
     * Retorna estat√≠sticas de uso do sistema
     *
     * @returns Promise<object> - Estat√≠sticas das √∫ltimas 24h
     */
    getStats(): Promise<{
        status: string;
        message: string;
        userActions?: undefined;
        frontendEvents?: undefined;
        lastUpdate?: undefined;
        error?: undefined;
    } | {
        userActions: {
            total: any;
            last24h: any;
        };
        frontendEvents: {
            total: any;
            last24h: any;
        };
        lastUpdate: string;
        status?: undefined;
        message?: undefined;
        error?: undefined;
    } | {
        error: any;
        lastUpdate: string;
        status?: undefined;
        message?: undefined;
        userActions?: undefined;
        frontendEvents?: undefined;
    }>;
    /**
     * Cria cabe√ßalhos nas abas de log do Google Sheets
     * Deve ser executado uma vez para configurar a planilha
     */
    createHeaders(): Promise<void>;
};
//# sourceMappingURL=googleSheetsService.d.ts.map